name: GPU integration CI pipeline

on:
  pull_request:

jobs:
  build-rock:
    uses: ./.github/workflows/build.yaml

  start-runner:
    name: Start self-hosted EC2 runner
    needs: [build-rock]
    runs-on: ubuntu-22.04
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2.3.6
        with:
          mode: start
          github-token: ${{ secrets.GH_TOKEN }}
          ec2-image-id: ${{ vars.AWS_EC2_IMAGE_ID }}
          ec2-instance-type: ${{ vars.AWS_EC2_INSTANCE_TYPE }}
          subnet-id: ${{ vars.AWS_DEFAULT_SUBNET_ID }}
          security-group-id: ${{ vars.AWS_SECURITY_GROUP_ID }}

  integration-tests:
    name: Run integration tests
    needs: [start-runner]
    runs-on: ${{ needs.start-runner.outputs.label }} 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        sudo -E bash ./tests/integration/setup-environment.sh
      env:
        MICROK8S_CHANNEL: 1.28/stable

    - name: Setup microk8s
      run: sudo -E /bin/bash ./tests/integration/config-microk8s-gpu.sh
      env:
        MICROK8S_ADDONS: "storage dns rbac gpu minio"

    - name: Configure microk8s
      run: |
        sudo microk8s.status
        sudo snap alias microk8s.kubectl kubectl
        mkdir -p /home/ubuntu/.kube
        sudo chown -f -R ubuntu /home/ubuntu/.kube
        sudo microk8s config | tee /home/ubuntu/.kube/config
    
    - name: Install required packages/snaps
      run: |
        sudo snap install yq
        sudo apt-get install build-essential

    - name: Get Artifact Name
      id: artifact
      run: |
        BASE_ARTIFACT=$(make help | grep 'Artifact: ')
        echo "base_artifact_name=${BASE_ARTIFACT#'Artifact: '}" >> $GITHUB_OUTPUT
        JUPYTER_ARTIFACT=$(make help FLAVOUR=jupyter | grep 'Artifact: ')
        echo "jupyter_artifact_name=${JUPYTER_ARTIFACT#'Artifact: '}" >> $GITHUB_OUTPUT
        KYUUBI_ARTIFACT=$(make help FLAVOUR=kyuubi | grep 'Artifact: ')
        echo "kyuubi_artifact_name=${KYUUBI_ARTIFACT#'Artifact: '}" >> $GITHUB_OUTPUT
        GPU_ARTIFACT=$(make help FLAVOUR=spark-gpu | grep 'Artifact: ')
        echo "gpu_artifact_name=${GPU_ARTIFACT#'Artifact: '}" >> $GITHUB_OUTPUT

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: charmed-spark
        path: charmed-spark

    - name: Load image
      run: |
        # Unpack Artifact
        mv charmed-spark/${{ steps.artifact.outputs.gpu_artifact_name }} .

        # Import artifact into microk8s to be used in integration tests
        sudo make microk8s-import PREFIX=test- REPOSITORY=ghcr.io/canonical/ \
          -o ${{ steps.artifact.outputs.gpu_artifact_name }}

    - name: Run integration tests on GPU
      run: |
        echo "Start test..."
        /bin/bash ./tests/integration/setup-aws-cli.sh
        /bin/bash ./tests/integration/integration-tests-gpu.sh
        echo "End of the test :)"
      env:
        KUBECONFIG: "/home/ubuntu/.kube/config"
        USER: "ubuntu"

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner 
      - integration-tests
    runs-on: ubuntu-22.04
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2.3.6
        with:
          mode: stop
          github-token: ${{ secrets.GH_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}